{
  "users": [
    {
      "id": 1,
      "username": "admin",
      "password": "admin",
      "name": "Bruce Lee",
      "avatarUrl": "/course-platform/images/default-admin.jpg"
    },
    {
      "name": "Brad Westfall",
      "username": "bradwestfall",
      "password": "abc123",
      "avatarUrl": "https://avatars.githubusercontent.com/u/2272118?v=4",
      "id": 2
    }
  ],
  "courses": [
    {
      "id": 1,
      "name": "React Core",
      "slug": "react"
    },
    {
      "id": 2,
      "name": "JavaScript",
      "slug": "javascript"
    }
  ],
  "lessons": [
    {
      "id": 1,
      "courseId": 1,
      "name": "Thinking in React",
      "slug": "thinking-in-react",
      "courseSlug": "react",
      "content": "- We like React because it's Composable and Declarative\n  - Composable: You can build small re-usable parts which can be used to build bigger, more complex things\n  - Declarative: We write in a style where we say \"what\" we want. When we write HTML, `<select>` is declarative because we simply describe the dropdown menu we want but without programming \"how\" it works. React can be considered declarative in two ways. First, when we write JSX we are describing what we want the UI to be but we're not working directly on the DOM. React does the DOM stuff for us so we could say that our instructions are declarative and React does the real DOM work which is imperative. Second, we can abstract UI into small components. We might have a special `<RemoveButton />` that can be used as an element declaratively and another React programmer programs how it works.\n- JSX is a syntax for easily creating nested function calls for each DOM element we want to make. Babel is a compiler that converts each JSX element into a `_jsx('div')` function call.\n- The instructor might show you that JSX compiles into `React.createElement('div')` instead, this is historically true in React 16 and below. At the time of this writing, React is on version 17 and if you're using 17 with modern a modern babel setup then your JSX compiles into the newer `_jsx()`.\n- The return value of a component (JSX turned into `_jsx('div')`) is like an \"instruction manual\" for how to create DOM elements.\n- In a typical React application, `ReactDOM.render()` is only used once. As React changes our JSX responses from our components, React will also take care of updating the DOM to reflect those JSX changes.\n- A function that returns JSX is a \"component\" in React. There are also older ways of creating components with classes. Function-based and class-based components can intermingle in the same app.",
      "draftContent": ""
    },
    {
      "id": 2,
      "courseId": 1,
      "name": "State and Refs",
      "slug": "state-and-refs",
      "courseSlug": "react",
      "content": "- `useState` Format: `const [value, setValue] = useState(defaultValue)`.\n- State can be considered any variable that changes over time in the component.\n- The entire component re-renders (the component function gets called again) each time state changes.\n- Multiple state values are done with multiple `useState`.\n- The order of hook declarations matters to React, so we can't \"conditionalize\" calls to `useState`\n- A good mental model for React is that UI is a function of state. In other words:\n  - The component renders for the first time and JSX is created from initial props and state.\n  - When state changes (often times through events like clicks), React calls our component function again and ensures the state variables reflect what was changed.\n  - This re-render will mean new JSX that is returned reflects the new state. It's like a new instruction manual for what does change in the DOM.\n  - React takes the previously returned JSX and the new JSX and finds the differences (called a diff). Only the things that are different are used to change the real DOM. This makes React very fast.",
      "draftContent": ""
    },
    {
      "id": 3,
      "courseId": 3,
      "name": "Simicolons",
      "slug": "simicolons",
      "courseSlug": "javascript",
      "content": "Perhaps you've heard or seen that semicolons aren't exactly required in JavaScript. There has been a ton of debate on whether or not devs should use them anyways, but the main points usually boil down to:\n\n- Point: You should use them because there are some edge cases where not having them can be a problem\n- Counterpoint: True, but if we use Babel to \"transpile\" our code, Babel is going to take the code we wrote without semicolons and it's going to add them back in for us anyways, so why does it matter?\n- Counterpoint: Yes, but... and it goes on and on\n\nWhether you like or don't like them is totally up to you. One piece of tooling that seems to normalize the conversation a bit is prettier.io, a formatting tool which rewrites the code as you type, or as you save, or as you push -- whichever you prefer. With tools like prettier, many of the \"what is your preference\" conversations are going away because tooling helps to normalize the code.",
      "draftContent": ""
    },
    {
      "id": 4,
      "courseId": 3,
      "name": "Variable Scope: var, let, and const",
      "slug": "variable-scope",
      "courseSlug": "javascript",
      "content": "JavaScript has always had var, which creates function-scope (or global scope). This can be a little confusing sometimes and is not often what we need.\n\n\"Block Scope\" can be easier to understand and manage which is why JavaScript got let, and const in ES2015. Here's a quick rundown of how all three work:\n\n```js\n// `var` is not block scope, it has global-scope in this\n// case. Here, `name` always refers to the same thing\n// because of that global scope.\nvar name = 'Michael'\nif (true) {\n  var name = 'Bruce'\n  name // 'Bruce'\n}\nname // 'Bruce'\n\n// `let` is block scope. This means if we declare name with\n// `let` in the block of the if-statement, that `name` will\n// be \"Bruce\" inside that block, and the outer `name` will\n// still be \"Michael\"\nlet name = 'Michael'\nif (true) {\n  let name = 'Bruce'\n  name // 'Bruce'\n}\nname // 'Michael'\n\n// `const` is also block scope like let\nconst name = 'Michael'\nif (true) {\n  const name = 'Bruce'\n  name // 'Bruce'\n}\nname // 'Michael'\n\n// The difference is that `let` can be reassigned\nlet isOpen = true\nisOpen = false\nisOpen // false\n\n// `const` cannot be reassigned\nconst isOpen = true\nisOpen = false // throws error\n\n// `const` in JavaScript does not mean it's a super\n// global constant for the whole application like how\n// other languages might have. In JS, it just means\n// it's block scope and cannot be re-assigned for that \n// block.\n\n// Although const cannot be reassigned, if the value\n// is an array or an object, it's inner parts can be\n// changed, as long as the array or object itself isn't\n// reassigned\nconst list = []\n\n// The `list` will always be this array, we can't change\n// that, but we can modify the parts:\nlist.push('Michael')\n\n// But this is not allowed, we cannot change (reassign)\n// list to be something other than the array it started\n// off to be\nlist = 'turn list into a string'\n```\n\nWe find block scope to make more sense to people and is generally more useful. Personally, I never use var anymore simply because it doesn't do anything I need. 99% of the time I use const since I don't need re-assignment, and if I do re-assignment, I use let.",
      "draftContent": ""
    },
    {
      "id": 5,
      "courseId": 3,
      "name": "Template Literals",
      "slug": "template-literals",
      "courseSlug": "javascript",
      "content": "Strings in JavaScript can made with single or double quotes. But when you make strings this way, you can't have multiline unless you manually add new lines. Template literals (sometimes referred to as Template strings) allow us to do multiline in a much cleaner way. Template literals use the back-tick instead of a single or double quote.\n\n```js\n// Manual hard returns with \\\\n isn't fun\nconst str = 'multiline\\\\nwith\\\\nmanual\\\\nhard returns'\n\n// This is much nicer.\nconst str = `\n  multiline\n  without\n  the\n  mess\n`\n```\n\nAnother benefit is string interpolation (making strings from variables)\n\n```js\nconst something = 'ugly stuff'\nconst str = 'instead of ' + something + ' like this'\n\nconst something = 'lovely stuff'\nconst str = `you can do ${something} like this`\n```\n\nIn the first example, the str is being built with a variable. Notice we have to use + concatenation to do so. In the second example, the str is a Template literal which can use ${} to interpolate variables into the string.\n\nWhen strings are made, the end result is no different if we use back-ticks, single quotes, or double quotes. So the fact that something was made with single-quotes doesn't mean anything when it comes to using it as an interpolated variable into the template literal.\n\nJavaScript would even coerce numbers if needed:\n\n```js\nconst version = 16\nconst str = `At the time of this writing, React is on version ${version}`\n```",
      "draftContent": ""
    },
    {
      "id": 6,
      "courseId": 3,
      "name": "Expressions vs Statements and Declarations",
      "slug": "expressions-statements-declarations",
      "courseSlug": "javascript",
      "content": "Most code in JavaScript is said to be either an Expression (Operator) or Declaration/Statement. It's not so important to memorize every last detail about these, but it is important to know some things about expressions for React since only expressions are allowed in JSX and not statements or declarations.\n\nThe brief definition is: Expressions resolve to a single value.\n\n```js\n// If we're thinking in terms of statements, we might\n// write code like this, with an If-Statement:\nlet result = null\nif (someCondition) {\n  result = 'Michael'\n} else {\n  result = 'Bruce'\n}\n\n// Here's how we might the same logic using a\n// ternary operator, which is a type of expression\n// because the line of code resolves to a single\n// value for result\nconst result = someCondition ? 'Michael' : 'Bruce'\n```\n\nIn this example, we have four separate expressions:\n\n```js\nconst name = 'michael jackson'\nconst parts = name.split(' ') // parts: ['michael', 'jackson']\nlet first = parts[0] // first: 'michael'\nfirst = first.toUpperCase() // first: 'MICHAEL'\n```\n\nEven though these are all expressions, JavaScript lets us combine and chain expressions together. In effect, all the expressions above can be rewritten into one expression:\n\n```js\nconst name = 'michael jackson'\nconst first = name.split(' ')[0].toUpperCase()\n\n// We could have even done this:\nconst first = 'michael jackson'.split(' ')[0].toUpperCase()\n```\n\nChaining expressions looks funny at first if you're coming from a language that doesn't do this sort of thing, but if you read it left to right, each part is resolving to a value and then making itself available to the next part. When we do name.split(' '), this resolves to an array, which means the next part can pick off the 0 index with [0]. That resolves to a string value of 'michael' which can then have a string method added to it like .toUpperCase(). Whatever the far right side of the expression resolves to gets returned to the left-hand side of the equal sign, in our case a variable called first.",
      "draftContent": ""
    },
    {
      "id": 7,
      "courseId": 3,
      "name": "Functions",
      "slug": "functions",
      "courseSlug": "javascript",
      "content": "Functions in JavaScript can be created in several ways, each with different tradeoffs. Here are three ways to be aware of:\n\n```js\n// Function Declaration\nfunction getName() {\n  return 'Michael'\n}\n\n// Function Expression\nconst getName = function() {\n  return 'Michael'\n}\n\n// Arrow Function (Which is also an expression)\nconst getName = () => {\n  return 'Michael'\n}\n```\n\nBased on the previous section on Declarations and Expressions, it's probably more clear as to why the first two get their names. The Function Expression is an \"expression\" because the function is being assigned to a value. Technically arrow functions are also expressions but conversationally we usually just refer to them as \"arrow functions\" and not \"arrow function expressions\".\n\nThe tradeoffs between function declarations and expressions is that declarations can be \"hoisted\" and expressions cannot. However, many times hoisting doesn't matter so most developers choose one or the other simply based on personal syntax preference.",
      "draftContent": ""
    },
    {
      "id": 8,
      "courseId": 3,
      "name": "Arrow Functions",
      "slug": "arrow-functions",
      "courseSlug": "javascript",
      "content": "Arrow functions are function expressions with a slightly different syntax. In the example above, you can see that the arrow function looks just like function expression example but without the word function and then with a => fat arrow between the parens and the opening curly-brace.\n\nYou may have heard that functions create their own scope in JavaScript. This means JavaScript functions create their own context for this which can be problematic if we want a function but without having its own context for this. One of the characteristics of an arrow function is that they don't create context so this inside the arrow function is the same as the this on the outside.\n\nArrow functions can also be really compact. Look at these two examples that do the exact same thing:\n\n```js\nconst getName = () => {\n  return 'Michael'\n}\n\n// Same as above but more compact\nconst getName = () => 'Michael'\n```\n\nWhen arrow functions omit their curly-braces, it means we want the thing on the right-hand side of the fat arrow to be the return (without saying return). This is called an implicit return.\n\nThere are some more subtle details to know about arrow functions like how to return an object literal and how to omit the parenthesis for a single parameter.\n",
      "draftContent": ""
    },
    {
      "id": 9,
      "courseId": 1,
      "name": "Client-Side Routing",
      "slug": "client-side-routing",
      "courseSlug": "react",
      "content": "The \"Overview\" page from the RR6 docs are better notes that we could write here, so lets use them: [https://reactrouter.com/docs/en/v6/getting-started/overview](https://reactrouter.com/docs/en/v6/getting-started/overview)",
      "draftContent": ""
    },
    {
      "id": 10,
      "courseId": 1,
      "name": "Side Effects",
      "slug": "side-effects",
      "courseSlug": "react",
      "content": "- `useEffect` Format: `useEffect(fn, [dependencyArray])`\n- `useEffect` is used for side effects. Typically this means we want to do something outside of our component, like a network request or perhaps with cookies/localStorage, and we want to do that side effect any time state changes.\n- The effect callback runs when the component first mounts and then anytime the values in the dependency array change. Having an empty dependency array is a way to ensure the effect only runs once.\n- However, be careful: any variables that your effect uses (depends on) need to be stated in your dependency array. With the older mental model of time and `componentDidMount`, we thought in terms of \"this just needs to happen once when we mount\". But now with `useEffect` we need to think in terms of \"anytime state changes, what do I need to do\". Therefore you'll probably need to put values in your dependency array often.\n\n```js\nuseEffect(fn) // runs when a component mounts, and any state changes\nuseEffect(fn, []) // runs just when a component mounts\nuseEffect(fn, [some, example, state]) // runs when a component mounts, and when `some` or `example` or `state` changes.\n```",
      "draftContent": ""
    },
    {
      "id": 11,
      "courseId": 1,
      "name": "Context",
      "slug": "context",
      "courseSlug": "react",
      "content": "- Parent components send variables (data) down to their child components via props.\n- Data flows Down (\"Unidirectional Data Flow\"): React's data model is said to be \"unidirectional\", meaning data flows from parent components down through the tree to child components through props. However, if a prop is passed down from parent to child and the prop is a callback function, then we might say that child components can communicate back up to their parents by calling the function. Some would say that \"data flows down, and events flow up\" the tree.\n- When components need to communicate with other components far away in this tree structure, one solution has been to \"lift state\" high enough to flow the information down to both components. But this could lead to many levels of \"prop drilling\" -- the process of passing props deep through the component hierarchy.\n- Context is a way to pass data around our app without having to prop drill.\n- Context gives us a `<Context.Provider />` component which we can add to the same component that contains the state. Then instead of passing props down through the normal hierarchy, we can pass a `value` into the provider JSX.\n- When values are passed into the provider's `value` prop, they can be received at any component below the provider with the `useContext` hook. Components using this hook are referred to as \"consumers\" of the context.\n- When the state changes at the top and is passed down into the provider, the consumers get a re-render to retrieve that new state.",
      "draftContent": ""
    }
  ],
  "students": []
}
